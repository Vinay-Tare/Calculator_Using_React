{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","calc","setCalc","result","setResult","ops","calculate","includes","slice","setTimeout","clearEntry","eval","toString","deleteLast","value","updateCalc","createDigits","digits","i","push","onClick","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"s4BAGA,SAASA,MAAO,IAAD,UACWC,oDAAS,IADpB,sOACNC,KADM,cACAC,QADA,yBAEeF,oDAAS,IAFxB,uOAENG,OAFM,cAEEC,UAFF,cAIPC,IAAM,CAAC,IAAK,IAAK,IAAK,KAEtBC,UAAY,SAAZA,YACAD,IAAIE,SAASN,KAAKO,OAAO,KAI3BN,QAAQ,uBACRE,UAAU,IACVK,YAAW,kBAAMC,eAAc,MALhCR,QAAQS,KAAKV,KAAKW,YAAYA,aAS3BC,WAAa,WACpB,GAAW,IAARZ,KAAH,CAGA,IAAMa,EAAQb,KAAKO,MAAM,GAAG,GAC5BN,QAAQY,GACPV,UAAU,MAGJM,WAAa,WACjBR,QAAQ,IACRE,UAAU,KAGNW,WAAa,SAAbA,WAAcD,OAEhBT,IAAIE,SAASO,QAAmB,KAATb,MACvBI,IAAIE,SAASO,QAAUT,IAAIE,SAASN,KAAKO,OAAO,MAKlDN,QAAQD,KAAOa,OAEXT,IAAIE,SAASO,OAIfV,UAAU,IAHVA,UAAUO,KAAKV,KAAOa,MAAMF,eAO1BI,aAAe,WAEnB,IADA,IAAMC,EAAS,GADU,WAEhBC,GACPD,EAAOE,KACL,qEAAQC,QAAS,kBAAML,WAAWG,EAAEN,aAApC,SACGM,GADmDA,KAFjDA,EAAI,EAAGA,EAAI,GAAIA,IAAM,EAArBA,GAOT,OAAOD,GAGT,OACE,kEAAKI,UAAU,MAAf,SACE,mEAAKA,UAAU,aAAf,UACE,kEAAKA,UAAU,QAAf,wBACA,mEAAKA,UAAU,UAAf,UACIlB,OAAS,kFAASA,OAAT,OAA4B,GADzC,OAGGF,MAAQ,OAEX,mEAAKoB,UAAU,YAAf,UACE,qEAAQD,QAAS,kBAAML,WAAW,MAAlC,eACA,qEAAQK,QAAS,kBAAML,WAAW,MAAlC,eACA,qEAAQK,QAAS,kBAAML,WAAW,MAAlC,gBACA,qEAAQK,QAAS,kBAAML,WAAW,MAAlC,eAEA,qEAAQK,QAAUP,WAAlB,iBACA,qEAAQO,QAAUV,WAAlB,mBAEF,mEAAKW,UAAU,SAAf,UACGL,eACD,qEAAQI,QAAS,kBAAML,WAAW,MAAlC,eACA,qEAAQK,QAAS,kBAAML,WAAW,MAAlC,eACA,qEAAQK,QAASd,UAAjB,uBAOKP,2B,gICjFAuB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAClC,EAAA,EAAD,MAEFmC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ea08a6a0.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport \"./App.css\";\n\nfunction App() {\n  const [calc, setCalc] = useState(\"\");\n  const [result, setResult] = useState(\"\");\n\n  const ops = [\"/\", \"*\", \"+\", \"-\"];\n\n  const calculate = () => {\n    if(!ops.includes(calc.slice(-1))) {\n\t    setCalc(eval(calc.toString()).toString());\n    }\n    else {\n      setCalc(\"Invalid Operation !\");\n      setResult(\"\");\n      setTimeout(() => clearEntry(), 1000);\n    }\n  }\n\n  const deleteLast = () => {\n\tif(calc == \"\") {\n\t\treturn;\n\t}\n\tconst value = calc.slice(0,-1);\n\tsetCalc(value);\n  setResult(\"\");\n  }\n\n  const clearEntry = () => {\n    setCalc(\"\");\n    setResult(\"\");\n  }\n\n  const updateCalc = (value) => {\n    if(\n      ops.includes(value) && calc === '' ||\n      ops.includes(value) && ops.includes(calc.slice(-1))\n    ) {\n      return;\n    }\n\n    setCalc(calc + value);\n\n    if(!ops.includes(value)) {\n      setResult(eval(calc + value.toString()));\n    }\n    else{\n      setResult(\"\");\n    }\n  };\n\n  const createDigits = () => {\n    const digits = [];\n    for (let i = 1; i < 10; i++) {\n      digits.push(\n        <button onClick={() => updateCalc(i.toString())} key={i}>\n          {i}\n        </button>\n      );\n    }\n    return digits;\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"calculator\">\n        <div className=\"title\">Calculator</div>\n        <div className=\"display\">\n          { result ? <span>({ result })</span> : \"\" }\n\t\t  &nbsp;\n          {calc || \"0\"}\n        </div>\n        <div className=\"operators\">\n          <button onClick={() => updateCalc(\"/\")}>/</button>\n          <button onClick={() => updateCalc(\"*\")}>*</button>\n          <button onClick={() => updateCalc(\"+\")}> +</button>\n          <button onClick={() => updateCalc(\"-\")}>-</button>\n\n          <button onClick={ deleteLast }>DEL</button>\n          <button onClick={ clearEntry }>CE</button>\n        </div>\n        <div className=\"digits\">\n          {createDigits()}\n          <button onClick={() => updateCalc(\"0\")}>0</button>\n          <button onClick={() => updateCalc(\".\")}>.</button>\n          <button onClick={calculate}>=</button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}